package work.myfavs.framework.orm;

import work.myfavs.framework.orm.meta.DbType;
import work.myfavs.framework.orm.util.common.StringUtil;
import work.myfavs.framework.orm.util.exception.DBException;
import work.myfavs.framework.orm.util.func.ThrowingConsumer;
import work.myfavs.framework.orm.util.func.ThrowingFunction;

import java.io.Closeable;
import java.sql.Connection;
import java.sql.SQLException;
import java.sql.Savepoint;
import java.util.Objects;

/**
 * 数据库
 */
public class Database implements Closeable {

  protected final DBTemplate  dbTemplate;
  protected final ConnFactory connFactory;

  private Query query;

  /**
   * 构造方法，建议通过 {@link DBTemplate#createDatabase()} 创建
   *
   * @param dbTemplate {@link DBTemplate}
   */
  public Database(DBTemplate dbTemplate) {
    this.dbTemplate = dbTemplate;
    this.connFactory = dbTemplate.getConnectionFactory();
    this.open();
  }

  /**
   * 判断当前是否使用 SQL Server 数据库
   *
   * @return 如果是返回 {@code true}，否则返回 {@code false}
   */
  public boolean isSqlServer() {
    return StringUtil.equals(getDbConfig().getDbType(), DbType.SQL_SERVER)
        || StringUtil.equals(getDbConfig().getDbType(), DbType.SQL_SERVER_2012);
  }

  /**
   * 判断当前是否使用 MySql 数据库
   *
   * @return 如果是返回 {@code true}，否则返回 {@code false}
   */
  public boolean isMySql() {
    return StringUtil.equals(getDbConfig().getDbType(), DbType.MYSQL);
  }

  public DBTemplate getDbTemplate() {
    return dbTemplate;
  }

  /**
   * 获取ORM数据库配置
   *
   * @return {@link DBTemplate#getDbConfig()}
   */
  public DBConfig getDbConfig() {
    return this.dbTemplate.getDbConfig();
  }


  public Connection getConnection() {
    return this.connFactory.getCurrentConnection();
  }

  /**
   * 打开数据库连接，需要与 {@link #close()} 配对使用
   *
   * @return 如果连接不存在，则创建，否则记录数据库连接打开次数 {@code +1}，并返回 {@link ConnFactory#openConnection()}
   */
  @SuppressWarnings("resource")
  public Database open() {
    this.connFactory.openConnection();
    return this;
  }


  /**
   * 释放数据库资源，与 {@link #open()} 配对使用 <br/>
   * 如果数据库连接打开次数 {@code > 1} ，则记录数据库连接次数 {@code -1} <br/>
   * 如果数据库连接打开次数 {@code = 1} ，则关闭数据库连接
   */
  @Override
  public void close() {
    if (Objects.nonNull(this.query)) this.query.close();
    this.connFactory.closeConnection(getConnection());
  }

  /**
   * 查询，设置 SQL 语句，并创建数据库 PrepareStatement 对象 <br>
   *
   * @param sql SQL 语句
   * @return {@link Database}
   */
  public Query createQuery(String sql) {
    return createQuery(sql, false);
  }

  /**
   * 查询，设置 SQL 语句，并创建数据库 PrepareStatement 对象 <br>
   *
   * @param sql             SQL 语句
   * @param autoGeneratedPK 是否生成主键
   * @return {@link Database}
   */
  public Query createQuery(String sql, boolean autoGeneratedPK) {
    if (Objects.isNull(this.query))
      return this.query = new Query(this, sql, autoGeneratedPK);
    else
      return this.query.createQuery(sql, autoGeneratedPK);
  }

  public Orm createOrm() {
    return OrmFactory.createOrm(this);
  }


  public Savepoint setSavepoint() {
    try {
      return getConnection().setSavepoint();
    } catch (SQLException e) {
      throw new DBException(e, "Fail to set save point: {}", e.getMessage());
    }
  }

  public Savepoint setSavepoint(String name) {
    try {
      return getConnection().setSavepoint(name);
    } catch (SQLException e) {
      throw new DBException(e, "Fail to set save point: {}", e.getMessage());
    }
  }

  public void rollback() {
    rollback(null);
  }

  public void rollback(Savepoint savepoint) {
    try {
      if (Objects.isNull(savepoint)) {
        getConnection().rollback();
      } else {
        getConnection().rollback(savepoint);
      }

    } catch (SQLException e) {
      throw new DBException(e, "Fail to rollback transaction: {}", e.getMessage());
    }
  }

  public void commit() {
    Connection connection = getConnection();
    try {
      if (Objects.isNull(connection) || connection.isClosed()) return;
      if (!connection.getAutoCommit()) {
        connection.commit();
      }
    } catch (SQLException e) {
      throw new DBException(e, "Fail to committed transaction: {}", e.getMessage());
    }
  }

  /**
   * 在事务中执行 {@link ThrowingFunction#apply(Object)}
   *
   * @param func      {@link ThrowingFunction} function
   * @param <TResult> function 返回结果类型
   * @return {@link ThrowingFunction#apply(Object) func.apply(Object)}
   */
  public <TResult> TResult tx(ThrowingFunction<Orm, TResult, SQLException> func) {
    try (Database database = this.open()) {
      Orm     orm    = database.createOrm();
      TResult result = func.apply(orm);
      database.commit();
      return result;
    } catch (SQLException e) {
      this.rollback();
      throw new DBException(e, "Error in transaction: {}", e.getMessage());
    }
  }

  /**
   * 在事务中执行 {@link ThrowingConsumer#accept(Object)}
   *
   * @param consumer {@link ThrowingConsumer} consumer
   */
  public void tx(ThrowingConsumer<Orm, SQLException> consumer) {

    try (Database database = this.open()) {
      Orm orm = database.createOrm();
      consumer.accept(orm);
      database.commit();
    } catch (SQLException e) {
      this.rollback();
      throw new DBException(e, "Error in transaction: {}", e.getMessage());
    }
  }
}
