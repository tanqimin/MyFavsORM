package work.myfavs.framework.orm;

import work.myfavs.framework.orm.meta.dialect.IDialect;
import work.myfavs.framework.orm.util.func.ThrowingConsumer;
import work.myfavs.framework.orm.util.func.ThrowingFunction;
import work.myfavs.framework.orm.util.func.ThrowingRunnable;
import work.myfavs.framework.orm.util.func.ThrowingSupplier;

import java.sql.CallableStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Collection;
import java.util.List;

public interface IDatabase {

  /**
   * 获取ORM配置
   *
   * @return ORM配置
   */
  DBConfig dbConfig();

  /**
   * 获取数据库方言
   *
   * @return 数据库方言
   */
  IDialect dialect();

  /**
   * 获取数据库连接工厂
   *
   * @return 数据库连接工厂
   */
  ConnFactory connFactory();

  /**
   * 执行事务(带返回值)
   *
   * @param supplier Supplier
   * @return R
   * @param <R> 返回值类型
   */
  <R> R tx(ThrowingSupplier<R, SQLException> supplier);

  /**
   * 执行事务(无返回值)
   *
   * @param runnable Supplier
   */
  void tx(ThrowingRunnable<SQLException> runnable);

  /**
   * 调用存储过程
   *
   * @param sql 调用存储过程语句，如：{ call proc_name(?,?,?)}
   * @param func func
   * @param <TResult> 结果
   * @return TResult
   */
  <TResult> TResult call(
      String sql, ThrowingFunction<CallableStatement, TResult, SQLException> func);

  <TResult> TResult call(
      String sql,
      ThrowingFunction<CallableStatement, TResult, SQLException> func,
      int queryTimeout);

  /**
   * 执行SQL，返回多行记录
   *
   * @param viewClass 结果集类型
   * @param sql SQL语句
   * @param params 参数
   * @param <TView> 结果集类型泛型
   * @return 结果集
   */
  <TView> List<TView> find(Class<TView> viewClass, String sql, Collection params);

  /**
   * 执行一个SQL语句
   *
   * @param sql SQL语句
   * @param params 参数
   * @param queryTimeOut 超时时间
   * @return 影响行数
   */
  int execute(String sql, Collection params, int queryTimeOut);

  int create(
      String sql,
      Collection params,
      boolean autoGeneratedPK,
      ThrowingConsumer<ResultSet, SQLException> pkConsumer);

  int createBatch(
      String sql,
      Collection<Collection> paramsList,
      boolean autoGeneratedPK,
      ThrowingConsumer<ResultSet, SQLException> consumer);

  int updateBatch(String sql, Collection<Collection> paramsList);
}
